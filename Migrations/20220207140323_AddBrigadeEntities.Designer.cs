// <auto-generated />
using System;
using DutyAndConductorManager.Api.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DutyAndConductorManager.Api.Migrations
{
    [DbContext(typeof(ConductorDb))]
    [Migration("20220207140323_AddBrigadeEntities")]
    partial class AddBrigadeEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnnouncementTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementTypeId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Announcements", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.AnnouncementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnnouncementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "InfoAnnouncement"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ImportantAnnouncement"
                        });
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Brigade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConductorLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("SetId");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.BrigadeUser", b =>
                {
                    b.Property<int>("BrigadeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.HasKey("BrigadeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BrigadeUsers");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LineTypeId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.LineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TramLine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BusLine"
                        });
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ShiftManager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Conductor"
                        });
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.SecurityToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("SecurityTokenTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityTokenTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityTokens");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.SecurityTokenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityTokenTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ActivationToken"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PasswordChangeToken"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ForgotPasswordToken"
                        });
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrained")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("SideNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleManufacturers");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCoupleable")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleSet", b =>
                {
                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.HasKey("SetId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleSets");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TramEngineCar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TramPassiveCar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bus"
                        },
                        new
                        {
                            Id = 4,
                            Name = "BusTrailer"
                        });
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Announcement", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.AnnouncementType", "AnnouncementType")
                        .WithMany("Announcements")
                        .HasForeignKey("AnnouncementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Api.Entities.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Brigade", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.Line", "Line")
                        .WithMany("Brigades")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Api.Entities.Set", "Set")
                        .WithMany("Brigades")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.BrigadeUser", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.Brigade", "Brigade")
                        .WithMany("BrigadeUsers")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Api.Entities.User", "User")
                        .WithMany("BrigadeUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Line", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.LineType", "LineType")
                        .WithMany("Lines")
                        .HasForeignKey("LineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineType");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.SecurityToken", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.SecurityTokenType", "SecurityTokenType")
                        .WithMany("SecurityTokens")
                        .HasForeignKey("SecurityTokenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Api.Entities.User", "User")
                        .WithMany("SecurityTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityTokenType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.User", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Vehicle", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleModel", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.VehicleManufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Api.Entities.VehicleType", "VehicleType")
                        .WithMany("Models")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleSet", b =>
                {
                    b.HasOne("DutyAndConductorManager.Api.Entities.Set", "Set")
                        .WithMany("VehicleSets")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DutyAndConductorManager.Api.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleSets")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.AnnouncementType", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Brigade", b =>
                {
                    b.Navigation("BrigadeUsers");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Line", b =>
                {
                    b.Navigation("Brigades");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.LineType", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.SecurityTokenType", b =>
                {
                    b.Navigation("SecurityTokens");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Set", b =>
                {
                    b.Navigation("Brigades");

                    b.Navigation("VehicleSets");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("BrigadeUsers");

                    b.Navigation("SecurityTokens");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.Vehicle", b =>
                {
                    b.Navigation("VehicleSets");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleManufacturer", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DutyAndConductorManager.Api.Entities.VehicleType", b =>
                {
                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
